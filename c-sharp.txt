These are some Codewars katas I wrote in C# that may come in handy


	public static bool BishopCapture(string bishop, string pawn)
        {
            string[] files = new string[] { "a", "b", "c", "d", "e", "f", "g", "h" };
            int bishoprank = Convert.ToInt32(bishop[1].ToString());
            int bishopfile = Array.IndexOf(files, bishop[0].ToString().ToLower());
            int pawnrank = Convert.ToInt32(pawn[1].ToString());
            int pawnfile = Array.IndexOf(files, pawn[0].ToString().ToLower());
            return (Math.Abs(bishoprank - pawnrank) == Math.Abs(bishopfile - pawnfile)) ? true : false;
        }

        public static bool Compare(string cell1, string cell2)
        {
            string[] files = new string[] { "a", "b", "c", "d", "e", "f", "g", "h" };
            int cell1rank = Convert.ToInt32(cell1[1].ToString());
            int cell1file = Array.IndexOf(files, cell1[0].ToString().ToLower());
            int cell2rank = Convert.ToInt32(cell2[1].ToString());
            int cell2file = Array.IndexOf(files, cell2[0].ToString().ToLower());
            int distance = cell2file - cell1file + cell2rank - cell1rank;
            return distance % 2 == 0 ? true : false;
        }

        public static int Knight(string s)
        {
            WriteLine("s: " + s);

            string[] files = new string[] { "a", "b", "c", "d", "e", "f", "g", "h" };
            int rank = Convert.ToInt32(s[1].ToString());
            int file = Array.IndexOf(files, s[0].ToString());

            int[,] moves = new int[,] { 
                { -1, 2 }, 
                { 1, 2 }, 
                { -1, -2 }, 
                { 1, -2 }, 
                { -2, 1 }, 
                { 2, 1 }, 
                { -2, -1 }, 
                { 2, -1 }
            };

            int newRank, newFile;
            int moveCount = 0;

            for (int i = 0; i < moves.GetLength(0); i++)
            {
                newFile = file + moves[i, 0];
                newRank = rank + moves[i, 1];

                if (newFile < 8 && newFile > -1 && newRank < 9 && newRank > 0)
                    moveCount++;
            }

            return moveCount;
        }